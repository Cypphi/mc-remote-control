name: Dev Build

on:
  push:
    branches:
      - 1.21.4
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build-and-report:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/1.21.4'
    env:
      DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v5

      - name: Set up JDK
        uses: actions/setup-java@v5
        with:
          distribution: temurin
          java-version: '21'
          cache: gradle

      - name: Grant execute permissions for Gradle
        run: chmod +x gradlew

      - name: Build project
        run: ./gradlew clean build

      - name: Prepare dev artifact
        id: prepare
        shell: bash
        run: |
          set -euo pipefail

          MOD_VERSION=$(awk -F= '$1=="mod_version"{gsub(/\r/,"",$2);print $2}' gradle.properties)
          MC_VERSION=$(awk -F= '$1=="minecraft_version"{gsub(/\r/,"",$2);print $2}' gradle.properties)
          BASE_NAME=$(awk -F= '$1=="archives_base_name"{gsub(/\r/,"",$2);print $2}' gradle.properties)

          shopt -s nullglob
          CANDIDATES=(build/libs/*-fabric-"${MC_VERSION}".jar)
          JAR_PATH=""
          for f in "${CANDIDATES[@]}"; do
            if [[ "$f" != *sources* ]]; then
              JAR_PATH="$f"
              break
            fi
          done
          if [[ -z "$JAR_PATH" ]]; then
            echo "Jar file for Minecraft ${MC_VERSION} not found under build/libs"
            exit 1
          fi

          RUN_NUMBER="${GITHUB_RUN_NUMBER}"
          NEW_NAME="${BASE_NAME}-${MOD_VERSION}-fabric-${MC_VERSION}-dev_${RUN_NUMBER}.jar"
          mv "$JAR_PATH" "build/libs/${NEW_NAME}"

          echo "jar_path=build/libs/${NEW_NAME}" >> "$GITHUB_OUTPUT"
          echo "artifact_name=${BASE_NAME}-dev-${RUN_NUMBER}" >> "$GITHUB_OUTPUT"
          echo "mod_version=${MOD_VERSION}" >> "$GITHUB_OUTPUT"
          echo "minecraft_version=${MC_VERSION}" >> "$GITHUB_OUTPUT"
          echo "run_number=${RUN_NUMBER}" >> "$GITHUB_OUTPUT"

      - name: Upload dev artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.prepare.outputs.artifact_name }}
          path: ${{ steps.prepare.outputs.jar_path }}
          if-no-files-found: error

      - name: Notify Discord webhook
        if: env.DISCORD_WEBHOOK_URL != ''
        env:
          WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          ARTIFACT_NAME: ${{ steps.prepare.outputs.artifact_name }}
          MOD_VERSION: ${{ steps.prepare.outputs.mod_version }}
          MINECRAFT_VERSION: ${{ steps.prepare.outputs.minecraft_version }}
          RUN_NUMBER: ${{ steps.prepare.outputs.run_number }}
          RUN_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          SHORT_SHA=${GITHUB_SHA:0:7}
          payload=$(cat <<EOF
{
  "embeds": [{
    "title": "MC Remote Control Dev Build #${RUN_NUMBER}",
    "url": "${RUN_URL}",
    "description": "Artifact **${ARTIFACT_NAME}** is ready.",
    "fields": [
      {"name": "Mod Version", "value": "${MOD_VERSION}", "inline": true},
      {"name": "Minecraft Version", "value": "${MINECRAFT_VERSION}", "inline": true},
      {"name": "Commit", "value": "[${SHORT_SHA}](https://github.com/${GITHUB_REPOSITORY}/commit/${GITHUB_SHA})", "inline": false}
    ],
    "footer": {"text": "${GITHUB_REPOSITORY}"}
  }]
}
EOF
)
curl -X POST -H "Content-Type: application/json" -d "$payload" "$WEBHOOK_URL"
